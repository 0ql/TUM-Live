daemon off;

error_log /dev/stderr error;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen 1935;  # public port receiving incoming streams
        chunk_size 2000;

        application stream {
            # No RTMP playback
            # HTTP callback when a stream starts publishing
            # Should return 2xx to allow, 3xx to redirect, anything else to deny.
            on_publish http://backend:8080/stream-management/on_publish;

            # Called when a stream stops publishing.  Response is ignored.
            on_publish_done http://backend:8080/stream-management/on_publish_done;
            live on;

            record all;
            record_append on;
            record_suffix _%d%m%Y.flv;
            record_path /recordings/vod;
            on_record_done http://backend:8080/stream-management/on_record_done;

            exec ffmpeg -i rtmp://localhost:1935/stream/$name
              -c:a aac -b:a 128k -c:v libx264 -b:v 4000k -f flv -g 30 -r 30 -s 1920x1080 -preset superfast -probesize 500000 -profile:v baseline rtmp://user:password@some.ingest.server.lrz.de:1935/livetum/$name;
        }
    }
}

http {
    sendfile off;
    tcp_nopush on;
    access_log /dev/stdout combined;

    map $sent_http_content_type $expires {
        default                    off;
        text/css                   max;
        application/javascript     max;
        font/woff2                 max;
        ~image/                    max;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 80;
        server_name live.mm.rbg.tum.de;
        return 301 https://live.mm.rbg.tum.de$request_uri;
    }
    server {
        listen 443 ssl;
        server_name live.mm.rbg.tum.de;
        ssl_certificate /etc/nginx/certs/your.fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/your.privkey.pem;
        # don't expose internal authentication endpoint.
        location /stream-management {
            deny all;
            return 404;
        }

        location ~ ^/api/chat/[0-9]+/ws$ {
                    proxy_pass http://backend:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection $connection_upgrade;
        }

        location / {
            expires $expires;
            proxy_pass http://backend:8080;
        }
    }
}
