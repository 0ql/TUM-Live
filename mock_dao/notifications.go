// Code generated by MockGen. DO NOT EDIT.
// Source: notifications.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockNotificationsDao is a mock of NotificationsDao interface.
type MockNotificationsDao struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationsDaoMockRecorder
}

// MockNotificationsDaoMockRecorder is the mock recorder for MockNotificationsDao.
type MockNotificationsDaoMockRecorder struct {
	mock *MockNotificationsDao
}

// NewMockNotificationsDao creates a new mock instance.
func NewMockNotificationsDao(ctrl *gomock.Controller) *MockNotificationsDao {
	mock := &MockNotificationsDao{ctrl: ctrl}
	mock.recorder = &MockNotificationsDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationsDao) EXPECT() *MockNotificationsDaoMockRecorder {
	return m.recorder
}

// AddNotification mocks base method.
func (m *MockNotificationsDao) AddNotification(ctx context.Context, notification *model.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotification indicates an expected call of AddNotification.
func (mr *MockNotificationsDaoMockRecorder) AddNotification(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockNotificationsDao)(nil).AddNotification), ctx, notification)
}

// DeleteNotification mocks base method.
func (m *MockNotificationsDao) DeleteNotification(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockNotificationsDaoMockRecorder) DeleteNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockNotificationsDao)(nil).DeleteNotification), ctx, id)
}

// GetAllNotifications mocks base method.
func (m *MockNotificationsDao) GetAllNotifications(ctx context.Context) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotifications", ctx)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotifications indicates an expected call of GetAllNotifications.
func (mr *MockNotificationsDaoMockRecorder) GetAllNotifications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotifications", reflect.TypeOf((*MockNotificationsDao)(nil).GetAllNotifications), ctx)
}

// GetNotifications mocks base method.
func (m *MockNotificationsDao) GetNotifications(ctx context.Context, target ...model.NotificationTarget) ([]model.Notification, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range target {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNotifications", varargs...)
	ret0, _ := ret[0].([]model.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockNotificationsDaoMockRecorder) GetNotifications(ctx interface{}, target ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, target...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockNotificationsDao)(nil).GetNotifications), varargs...)
}
