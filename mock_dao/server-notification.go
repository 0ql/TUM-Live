// Code generated by MockGen. DO NOT EDIT.
// Source: server-notification.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockServerNotificationDao is a mock of ServerNotificationDao interface.
type MockServerNotificationDao struct {
	ctrl     *gomock.Controller
	recorder *MockServerNotificationDaoMockRecorder
}

// MockServerNotificationDaoMockRecorder is the mock recorder for MockServerNotificationDao.
type MockServerNotificationDaoMockRecorder struct {
	mock *MockServerNotificationDao
}

// NewMockServerNotificationDao creates a new mock instance.
func NewMockServerNotificationDao(ctrl *gomock.Controller) *MockServerNotificationDao {
	mock := &MockServerNotificationDao{ctrl: ctrl}
	mock.recorder = &MockServerNotificationDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerNotificationDao) EXPECT() *MockServerNotificationDaoMockRecorder {
	return m.recorder
}

// CreateServerNotification mocks base method.
func (m *MockServerNotificationDao) CreateServerNotification(ctx context.Context, notification model.ServerNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServerNotification indicates an expected call of CreateServerNotification.
func (mr *MockServerNotificationDaoMockRecorder) CreateServerNotification(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerNotification", reflect.TypeOf((*MockServerNotificationDao)(nil).CreateServerNotification), ctx, notification)
}

// DeleteServerNotification mocks base method.
func (m *MockServerNotificationDao) DeleteServerNotification(ctx context.Context, notificationId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerNotification", ctx, notificationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerNotification indicates an expected call of DeleteServerNotification.
func (mr *MockServerNotificationDaoMockRecorder) DeleteServerNotification(ctx, notificationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerNotification", reflect.TypeOf((*MockServerNotificationDao)(nil).DeleteServerNotification), ctx, notificationId)
}

// GetAllServerNotifications mocks base method.
func (m *MockServerNotificationDao) GetAllServerNotifications(ctx context.Context) ([]model.ServerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServerNotifications", ctx)
	ret0, _ := ret[0].([]model.ServerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServerNotifications indicates an expected call of GetAllServerNotifications.
func (mr *MockServerNotificationDaoMockRecorder) GetAllServerNotifications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServerNotifications", reflect.TypeOf((*MockServerNotificationDao)(nil).GetAllServerNotifications), ctx)
}

// GetCurrentServerNotifications mocks base method.
func (m *MockServerNotificationDao) GetCurrentServerNotifications(ctx context.Context) ([]model.ServerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentServerNotifications", ctx)
	ret0, _ := ret[0].([]model.ServerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentServerNotifications indicates an expected call of GetCurrentServerNotifications.
func (mr *MockServerNotificationDaoMockRecorder) GetCurrentServerNotifications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentServerNotifications", reflect.TypeOf((*MockServerNotificationDao)(nil).GetCurrentServerNotifications), ctx)
}

// UpdateServerNotification mocks base method.
func (m *MockServerNotificationDao) UpdateServerNotification(ctx context.Context, notification model.ServerNotification, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServerNotification", ctx, notification, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServerNotification indicates an expected call of UpdateServerNotification.
func (mr *MockServerNotificationDaoMockRecorder) UpdateServerNotification(ctx, notification, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServerNotification", reflect.TypeOf((*MockServerNotificationDao)(nil).UpdateServerNotification), ctx, notification, id)
}
